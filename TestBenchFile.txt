//Testbench code 
timescale 1ns/1ps 

 module RAM_tb;
//Input and Outputs
reg  reloj_tb, we_tb;
reg [4:0] rs_add_tb;
reg [4:0] rt_add_tb;
reg [31:0] rd_data_tb;
wire [31:0] rs_data_tb;
wire [31:0] rt_data_tb;


RAM UUT(.reloj(reloj_tb), .we(we_tb), .rs_add(rs_add_tb), .rt_add(rt_add_tb), .rd_data(rd_data_tb), .rs_data(rs_data_tb), .rt_data(rt_data_tb));
initial 
	begin 
		$dumpfile("RAMtb.vcd");
		$dumpvars(1,RAM_tb); 
		//Suggested Code 
/* 		we_tb= 0; //Reset
		rs_add_tb = 0;
		rt_add_tb = 0;
		rd_data_tb = 0;


		#1
		we_tb = 1; //Reset
 		rs_add_tb = 5'b1100;
 		rt_add_tb = 5'b11010;
 		rd_data_tb = 32'b1010100010010011111100001101111;


		#1
 		rs_add_tb = 5'b1110;
 		rt_add_tb = 5'b101;
 		rd_data_tb = 32'b100000101011101100010011100101;


		#1
 		rs_add_tb = 5'b11001;
 		rt_add_tb = 5'b10100;
 		rd_data_tb = 32'b1000100010001000000010000100001;


		#1
 		rs_add_tb = 5'b11001;
 		rt_add_tb = 5'b11101;
 		rd_data_tb = 32'b1010100111110111010011000010010;


		#1
 		rs_add_tb = 5'b10110;
 		rt_add_tb = 5'b1001;
 		rd_data_tb = 32'b10010010001101011000100110000101;
*/
		#1
		$finish 
 	end
	//Autogenerated Clock with the name reloj_tb
	always forever #1 reloj_tb = ~reloj_tb;

 endmodule